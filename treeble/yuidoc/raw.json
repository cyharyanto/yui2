{"majorversion": 2, "filemap": {"Treeble.js": {"classlist": ["YAHOO.util.TreebleDataSource", "YAHOO.widget.DataTable"], "name": "Treeble.js", "module": "Treeble"}, "classmap.js": {"name": "classmap.js", "classlist": [], "module": "Treeble", "guessedname": "classMap", "guessedtype": "property", "property": "classMap"}}, "modules": {"Treeble": {"description": "TreebleDataSource class converts tree of data into a flat list of\nvisible items.  This list of items can then be paginated by DataTable.\nThe merged list must be paginated because the number of child nodes\nmight be very large.\nThe tree of DataSources must be homogeneous, i.e., all of the same type,\nand they must all use the same schema.", "submodules": [], "classlist": ["YAHOO.util.TreebleDataSource", "YAHOO.widget.DataTable"], "filelist": ["Treeble.js", "classmap.js"], "subdata": {}, "name": "Treeble"}}, "classmap": {"YAHOO.util.TreebleDataSource": {"name": "YAHOO.util.TreebleDataSource", "constructors": [{"params": [{"type": "DataSource", "name": "oLiveData", "description": "   Pointer to root of the DataSource tree."}, {"type": "Object} Object literal of configuration values.  Required params are:\n<dl>\n<dt>generateRequest</dt>\n<dd>(required) The function to convert the output from\n<code>DataTable.generateTreebleDataSourceRequest()</code> into\na request usable by one of the actual DataSources.  This function\ntakes two arguments: state {sort,dir,startIndex,results", "name": "oConfigs", "description": "  and path\n(an array of node indices telling how to reach the node).\n</dd>\n<dt>childNodesKey</dt>\n<dd>(semi-optional) The name of the key inside a node which contains the data\nused to construct the DataSource for retrieving the children.\nThis data is passed to <code>DataSource.parseDataSource()</code>.</dd>\nThis config is only required if you provide a custom parser.\n<dt>startIndexExpr</dt>\n<dd>(optional) OGNL expression telling how to extract the startIndex\nfrom the received data, e.g., <code>.meta.startIndex</code>.\nIf it is not provided, startIndex is always assumed to be zero.</dd>\n<dt>totalRecordsExpr</dt>\n<dd>(semi-optional) OGNL expression telling how to extract the total number\nof records from the received data, e.g., <code>.meta.totalRecords</code>.\nIf this is not provided, <code>totalRecordsReturnExpr</code> must be\nspecified.</dd>\n<dt>totalRecordsReturnExpr</dt>\n<dd>(semi-optional) OGNL expression telling where in the response to store\nthe total number of records, e.g., <code>.meta.totalRecords</code>.\nThis is only appropriate for DataSources that always return the\nentire data set.  If this is not provided,\n<code>totalRecordsExpr</code> must be specified.</dd>\n<dt>paginateChildren</dt>\n<dd>(optional) Pass <code>true</code> to paginate the result after merging\nchild nodes into the list.  The default (<code>false</code>) is to\npaginate only top-level nodes, so all children are visible.</dd>\n</dl>"}], "description": "TreebleDataSource class converts tree of data into a flat list of\nvisible items.  This list of items can then be paginated by DataTable.\nThe merged list must be paginated because the number of child nodes\nmight be very large.\nThe tree of DataSources must be homogeneous, i.e., all of the same type,\nand they must all use the same schema."}], "namespace": "YAHOO.util", "module": "Treeble", "guessedname": "TreebleDataSource", "methods": {"toggle": {"return": {"type": "boolean", "description": "false if the path to the node has not yet been fully explored or is not openable, true otherwise"}, "params": [{"type": "Array", "name": "path", "description": "  Path to the node"}, {"type": "Object", "name": "request", "description": "  Request generated by DT.generateTreebleDataSourceRequest()"}, {"type": "Function|Object} Function to call when the operation completes.  Can be object: {fn,scope,args", "name": "completion", "description": ""}], "description": "Toggle the specified node between open and closed.  When a node is\nopened for the first time, this requires a request to the\nDataSource.  Any code that assumes the node has been opened must be\npassed in as a completion function.", "guessedname": "toggle", "guessedtype": "function"}, "makeConnection": {"return": {"type": "Number", "description": "Transaction ID."}, "description": "Overriding method generates queries to all visible DataSources.", "private": "", "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oCallback", "description": "  Callback object literal."}, {"type": "Object", "name": "oCaller", "description": "  (deprecated) Use oCallback.scope."}], "guessedname": "makeConnection", "guessedtype": "function"}, "DataSourceBase.parseDataSource": {"return": {"type": "DataSource", "description": "The new data source."}, "description": "Converts data to a DataSource.  Data can be an object containing both\n<code>dataType</code> and <code>liveData</code>, or it can be <q>free\nform</q>, e.g., an array of records or an XHR URL.", "static": "", "guessedname": "parseDataSource", "guessedtype": "function", "params": [{"type": "mixed", "name": "oData", "description": "  Data to convert."}]}, "isOpen": {"return": {"type": "boolean", "description": "true if the node is open"}, "params": [{"type": "Array", "name": "path", "description": "  Path to node"}], "guessedname": "isOpen", "guessedtype": "function"}}, "extends": "YAHOO.util.DataSourceBase", "superclass": "YAHOO.util.DataSourceBase", "file": "Treeble.js", "guessedtype": "function", "shortname": "TreebleDataSource", "description": "TreebleDataSource class converts tree of data into a flat list of\nvisible items.  This list of items can then be paginated by DataTable.\nThe merged list must be paginated because the number of child nodes\nmight be very large.\nThe tree of DataSources must be homogeneous, i.e., all of the same type,\nand they must all use the same schema."}, "YAHOO.widget.DataTable": {"name": "YAHOO.widget.DataTable", "namespace": "YAHOO.widget", "module": "Treeble", "methods": {"toggleRow": {"params": [{"type": "Array", "name": "path", "description": "  Path to node."}], "description": "Toggle the state of a row.", "guessedname": "toggleRow", "guessedtype": "function"}, "rowIsOpen": {"return": {"type": "boolean", "description": "true if the row is open."}, "params": [{"type": "Array", "name": "path", "description": "  Path to node."}], "description": "Check if a row is open.", "guessedname": "rowIsOpen", "guessedtype": "function"}, "DataTable.generateTreebleDataSourceRequest": {"return": {"type": "Object", "description": "Pagination and sorting state formatted for TreebleDataSource."}, "description": "Generate the request object required by TreebleDataSource.", "static": "", "guessedname": "generateTreebleDataSourceRequest", "guessedtype": "function", "params": [{"type": "Object", "name": "oState", "description": "  Pagination and sorting state."}, {"type": "DataTable", "name": "oSelf", "description": "  The data table."}]}}, "file": "Treeble.js", "shortname": "DataTable", "description": "Treeble extensions to DataTable.\nWe don't create a new DataTreeble class because that complicates\nexisting extensions to DataTable.  Existing extensions should work\ntransparently when given a TreebleDataSource."}}, "version": "1.0.0", "namespaces": ["YAHOO.util", "YAHOO.widget"]}